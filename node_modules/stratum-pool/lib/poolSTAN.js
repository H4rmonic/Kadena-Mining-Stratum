// 			const client = Stan.connect(this.opts.clusterID, this.nodeID, this.opts);

const nkeys_seed = "SUAFGNAM64V5PH2G4M3GZBQN3OIVMNBY5CQE2ETLHHL754R5X2WNUC2APA";
var stan = require('node-nats-streaming').connect(
        'dev', 
	'26', 
	{servers: ['nats://192.168.2.43:60100']},
);
stan.on('connect', function () {
console.log("connected");

  // Simple Publisher (all publishes are async in the node version of the client)
  stan.publish('sharetest', 'Hello node-nats-streaming!', function(err, guid){
    if(err) {
      console.log('publish failed: ' + err);
    } else {
      console.log('published message with guid: ' + guid);
    }
  });
 
  // Subscriber can specify how many existing messages to get.
  var opts = stan.subscriptionOptions().setStartWithLastReceived();
  var subscription = stan.subscribe('sharetest', opts);
  subscription.on('sharetest', function (msg) {
    console.log('Received a message [' + msg.getSequence() + '] ' + msg.getData());
  });
 
  // After one second, unsubscribe, when that is done, close the connection
  setTimeout(function() {
    subscription.unsubscribe();
    subscription.on('unsubscribed', function() {
      stan.close();
    });
  }, 1000);
});
 
stan.on('close', function() {
  process.exit();
});
