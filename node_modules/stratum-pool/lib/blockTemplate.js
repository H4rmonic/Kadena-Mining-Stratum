// var bignum = require('bignum');
var blake2b = require("blake2b");
//var merkleTree = require('./merkleTree.js');
var transactions = require("./transactions.js");
var util = require("./util.js");
var u2 = require("util");
var chalk = require("chalk");

/**
 *   Note to self: Put things in here I want to compare in currentJob vs latest block header!!!
 **/
var BlockTemplate = (module.exports = function BlockTemplate(
  jobId,
  rpcData,
  nodeIndex,
  nodeId,
  isF1
) {
  //var submits = {}; // [];
  let submits = [];

  //public members
  this.powHeader = rpcData.substring(72);
  this.nodeIndex = nodeIndex;
  this.nodeId = nodeId;

  this.startTime = Date.now();
  this.shareCount = 0n;

  this.jobId = jobId;

  this.chainId = util.getChainId(rpcData);
  //this.parent = rpcData.substring(104, 168); // no need to bswap -- only for detection of change
  this.height = util.getHeight(rpcData); //parseInt(util.reverseHex(rpcData.substring(588, 604)), 16);
  this.blockTgt = BigInt("0x" + util.reverseHex(rpcData.substring(8, 72)));
  this.difficulty = util.target_to_diff(this.blockTgt);
  this.longChainId = rpcData.substring(0, 8); // For F1

  //console.log("longChainId " + this.longChainId + " chainId " + this.chainId);

  this.registerSubmit = function (extraNonce2) {
    //console.log(`registerSubmit ${extraNonce2} size ${Object.keys(submits).length}`);
    //var submission = extraNonce1 + extraNonce2 + nTime + nonce;
    let submission = this.chainId + this.height + extraNonce2;
    //if (typeof submits[submission] === "undefined") {
    if (submits.indexOf(submission) === -1) {
	    submits.push(submission);
	    //submits[submission] = 1;
      //console.log("registerSubmit ok " + submits[submission] + " size:" + Object.keys(submits).length);
      return true;
    } else {
	 console.log("DEBUG duplicate share nonce " + extraNonce2 + " chainId " + this.chainId + " height " + this.height); /*+ " submits length is: " + u2.inspect(submits));*/
       return false;
    }
  };


  /*
   * ["jobId", "header hash", height, "parent hash", cleanJob]
   * */
  this.getJobParams = function () {
    if (!this.jobParams) {
      this.jobParams = [this.jobId, this.powHeader];
    }
    //console.log("jobParams:" + JSON.stringify(this.jobParams));
    return this.jobParams;
  };
});

BlockTemplate.prototype.valueOf = function () {
  return this.difficulty;
};
