//var algos = require("stratum-pool/lib/algoProperties.js");
var cluster = require("cluster");
const poolRedis = require("./poolRedis");

const mysql = require("mysql");
//const poolNATS = require("./poolNATS"); 

module.exports = function(logger, poolConfig) {
  const mposConfig = poolConfig.mposMode;
  const coin = poolConfig.coin.name;

  const connection = mysql.createPool({
    host: mposConfig.host,
    port: mposConfig.port,
    user: mposConfig.user,
    password: mposConfig.password,
    database: mposConfig.database
  });

  const query = (...args) => {
  // console.log(`Running query ${args[0]} with data ${args[1]}`)
    return new Promise((resolve, reject) => {
      //console.log(`Running query ${args[0]} with data ${args[1]}`)
      connection.query(args[0], args[1], function(err, result) {
        if (err) reject(err);
        resolve(result);
      });
    });
  };

  const logIdentify = "MySQL";
  const logComponent = coin;

// TODO
	
/*
  let registerRedis = (async function() {
    const symbol = poolConfig.coin.symbol;
    const coinData = await query("SELECT id FROM coins WHERE symbol = ?", [
      symbol
    ]);
    const coinid = coinData[0].id;
    console.log(".............Redis registrating.............");
    let results = await poolRedis.registerCoinid(coinid).catch(err => {
      console.log("Redis registration failed:" + err);
    });
  })();
*/

  //console.log("cluster.worker=" + console.dir(cluster.worker));
  // Create Stratum
  //console.log("cluster.worker.id=" + cluster.worker.id);

  if (cluster.worker.id == 1) {
    var ports = Object.keys(poolConfig.ports);
    const pid = process.env.pid;
    const timestamp = Math.round(+new Date() / 1000);
    const algo = poolConfig.coin.algorithm;
     // const url = "url";
    const port = ports[0];
    const symbol = poolConfig.coin.symbol;
    // todo where do we get the current stratum port????

    try {
      //console.log("****** insert stratums pid=" + pid);
      const result = query(
        "INSERT INTO stratums (pid, time, started, algo, workers, port, symbol) VALUES (?, ?, ?, ?, ?, ?, ?)",
        [pid, timestamp, timestamp, algo, 0, port, symbol]
      );
    } catch (err) {
      logger.error(
        logIdentify,
        logComponent,
        "Unable to insert stratum: " + JSON.stringify(err)
      );
    }
  }

  function roundFix(number, precision) {
    var multi = Math.pow(10, precision);
    return Math.round((number * multi).toFixed(precision + 1)) / multi;
  }

 
  //
  // Auth
  //
  this.handleAuth = async function (rawip, version, port, workerName, password, authCallback) {
    //console.log(`mpos rawip:${rawip} version:${version} port:${port} workerName:${workerName} password:${password} authCallback:${authCallback}`);
    const ip = /\d.*/.exec(rawip)[0];
    if (!password) password = "NULL";

    //console.log(`ip = ${ip}, version = ${version}`);
    if (poolConfig.validateWorkerUsername !== true && mposConfig.autoCreateWorker !== true) {
      // console.log("****************** handleAuth no validate user no auto create user.. untested logic!\n");
      authCallback(true, iceWorkerId, iceUserId, iceCoinId)
      return;
    }
    
    
      const symbol = poolConfig.coin.symbol;
      const coinData = await query('SELECT id FROM coins WHERE symbol = ?', [symbol])
      const wallet = workerName.split('.')[0];
      const rigname = workerName.split('.')[1];
      const pid = process.env.pid;
      const timestamp = Math.round(+new Date()/1000);

			const coinid = coinData[0].id;
      const algo = poolConfig.coin.algorithm;
      // const port = poolConfig.initStats.stratumPorts[0];
      const url = "url";
      const accountData = await query('SELECT id FROM accounts WHERE username = ?', [wallet]);

      // ****** TODO handle password and -p c= and -p mp=
      var ports = Object.keys(poolConfig.ports)[0];

      // data to pass back to stratum-pool
      var callbackData = {
        iceCoinId: coinid,
        iceUserId:  null,
        iceWorkerId: null,
        difficulty: null // or hard code a test number
      };

      // Handle d= in password
      let stratumDiff = poolConfig.ports[port].diff;
      //console.log("stratumDiff:" + stratumDiff);
      let regPassResult = /d=(\d+(\.\d{1,2})?)\d*?/.exec(password);
      if (regPassResult){
        stratumDiff = parseFloat(regPassResult[1]);
        let maxDiff = poolConfig.ports[port].varDiff.maxDiff;
        let minDiff = poolConfig.ports[port].varDiff.minDiff;
        if (stratumDiff >= minDiff && stratumDiff <= maxDiff){
          callbackData.difficulty = stratumDiff;
        }
      }
/*
      // Handle mp= in password
      let regMpResult = /mp=(\d+(\.\d)?)\d*?/.exec(password);
      let minPayout = null;
      if (regMpResult){
        let mp = parseFloat(regMpResult[1]);
        if (mp >= 0.1 && mp <= 1000000){
          minPayout = mp;
        }
      }
*/
    try {
      if (!accountData[0]) {
        console.log("no account.. accountData=" + JSON.stringify(accountData))
        const accounts = await query('INSERT INTO accounts (coinid, username, balance, donation, hostaddr) values (?, ?, 0, 0, ?);', [coinid, wallet, ip]);

        console.log("New Account:" + wallet + " userid:" + accounts.insertId + " ip:" + ip);
        callbackData.iceUserId = accounts.insertId;
        callbackData.iceCoinId = coinid; //todo needed?
        authCallback(true, callbackData);
      } else {
        const userid = accountData[0].id;
        result = await query('INSERT INTO workers (userid, coinid, ip, name, difficulty, version, password, worker, algo, time, pid) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)', [userid, coinid, ip, wallet, stratumDiff, version, password, rigname, algo, timestamp, pid])
        callbackData.iceWorkerId = result.insertId;
        callbackData.iceUserId = userid;
        callbackData.iceCoinId = coinid;
        authCallback(true, callbackData);
        //console.log("No existing worker, creating id=" + result.insertId + " workerid=" + result.insertId + " userid=" + userid + " callbackData=" + JSON.stringify(callbackData));
        //  } catch (err) {
        //    console.error(err);
        //    authCallback(false, callbackData);
        //    logger.error(logIdentify, logComponent, 'Database error when authenticating account: ' + JSON.stringify(err))
      }
    } catch (err) {
         console.error(err);
         authCallback(false, callbackData);
         logger.error(logIdentify, logComponent, 'Database error when authenticating account: ' + JSON.stringify(err))
    }
  };



  //
  // Share
  //
  this.handleShare = async function(isValidShare, isValidBlock, shareData) { 
    const wallet = shareData.worker.split(".")[0];
    const symbol = poolConfig.coin.symbol;
    const timestamp = Math.round(+new Date() / 1000);

    //console.log("mpos share difficulty=" + shareData.difficulty+ " share_diff=" + shareData.shareDiff + ", blockDiff=" + shareData.blockDiff);

if (!shareData.blockReward) {
    //shareData.blockReward = 66.64000000000;
    //process.stdout.write(" [blockReward is NULL]");
}

    if (isValidShare) {
      let redisData = [
        shareData.yiimpUserId,
        shareData.yiimpWorkerId,
        shareData.yiimpCoinId,
        timestamp,
        "blake2s",
        1,
        shareData.difficulty, // algos[poolConfig.coin.algorithm].multiplier,
        shareData.shareDiff,
        shareData.blockReward, // 100000000,
        shareData.blockDiff
      ];
      // console.log("insert share. yiimpUserId=" + shareData.iceUserId+ " yiimpWorkerId=" + shareData.iceWorkerId+ " yiimpCoinId= " + shareData.iceCoinId+ " redisData=" + JSON.stringify(redisData));
      await poolRedis.sendShare(shareData.yiimpCoinId, redisData).then(() => {
        //logger.debug(logIdentify, logComponent, 'Share inserted')
      });
      
      /*
      let NATSData = { 	
	user: shareData.iceUserId,
       	worker:	shareData.iceWorkerId,
        coin: shareData.iceCoinId,
        t: timestamp,
        algo: "equihash144",
        valid: 1,
        diff: shareData.difficulty, // algos[poolConfig.coin.algorithm].multiplier,
        sdiff: shareData.shareDiff,
        rwd: shareData.blockReward, // 100000000,
        bdiff: shareData.blockDiff
      };
      */
      // console.log("insert share. iceUserId=" + shareData.iceUserId + " iceWorkerId=" + shareData.iceWorkerId + " iceCoinId= " + shareData.iceCoinId + " NATSData=" + JSON.stringify(NATSData));
      // poolNATS.sendShare(NATSData);
    }


// TODO Blocks shoudl go into publish also, another queue group icems will handle this for more reliability
    if (isValidBlock) {
      //console.log(`*** MPOS BLOCK HASH ${shareData.blockHash}`)
      try {
        //	{"job":"cccd","ip":"::ffff:192.168.2.101","port":3857,"worker":"n3jQ9jawGaf35XjXXmaN6V3K5QceJe4L9h","height":36859,"blockReward":5000000000,"difficulty":0.05,"shareDiff":"17.44026190","blockDiff":4.305100055,"blockDiffActual":4.305100055,"blockHash":"0000756def120cb203b12d5d4b9234327b5f091dc1610e012226844906b25b5d","txHash":"dff9ac3b45057f58d3a18dbfd57c83b01bf29e949875f99cc6eaea98d796e95c"}

        // console.log(`block reward: ${shareData.blockReward} full block: `, JSON.stringify(shareData));
        const result = await query(
          "INSERT INTO kdablocks (coin_id, time, userid, workerid, height, chainid, algo, category, difficulty_user, amount, difficulty, blockhash, txhash) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
          [
            shareData.iceCoinId,
            timestamp,
            shareData.iceUserId,
            shareData.iceWorkerId,
            shareData.height,
            shareData.chainId,
            poolConfig.coin.algorithm,
            "new",
            shareData.shareDiff,
            shareData.blockReward,
            shareData.blockDiff,
            shareData.blockHash,
            shareData.txHash
          ]
        );

        if (result) {
          // logger.debug(logIdentify, logComponent, 'Block inserted')
        }
      } catch (err) {
        logger.error(
          logIdentify,
          logComponent,
          "Insert error when adding block: " + JSON.stringify(err)
        );
      }
    }
  };


  //
  // Diff
  //
  this.handleDifficultyUpdate = async function(workerName, diff, iceWorkerId) {
    //console.log("****** workerName=" + workerName + " diff=" + diff + " iceWorkerId=" + iceWorkerId);
    //diff = diff.toNumber();

    // if (diff > 10) diff = roundFix(diff, 0);
    // else if (diff < 1) diff = roundFix(diff, 3);
    // else diff = roundFix(diff, 2);

    try {
      const result = await query(
        "UPDATE workers SET difficulty = ? WHERE id = ?",
        [diff, iceWorkerId]
      );
      if (result.affectedRows === 0) {
        // todo needed?? const insertResult = await query('INSERT INTO `pool_worker` SET ?', { username: workerName, difficulty: diff })
        logger.debug(
          logIdentify,
          logComponent,
          "Updated difficulty successfully" + insertResult
        );
      }
    } catch (err) {
      logger.error(
        logIdentify,
        logComponent,
        "Error when updating worker diff: " +
          diff +
          " iceWorkerId=" +
          iceWorkerId +
          " worker:" +
          workerName +
          " error=" +
          JSON.stringify(err)
      );
    }
  };

  this.handleDisconnect = async function(iceWorkerId) {
    try {
      const result = await query("DELETE from workers WHERE id = ?", [
        iceWorkerId
      ]);
      if (result.affectedRows === 0) {
        // todo needed?? const insertResult = await query('INSERT INTO `pool_worker` SET ?', { username: workerName, difficulty: diff })
        //logger.debug(logIdentify, logComponent, 'Updated difficulty successfully' + insertResult)
      }
    } catch (err) {
      logger.error(
        logIdentify,
        logComponent,
        "Error when cleaning up worker id : " + iceWorkerId
      );
    }
  };
};
