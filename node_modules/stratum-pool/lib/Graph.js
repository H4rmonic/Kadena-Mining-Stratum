    constructor(name) {
        this.name = name;
    }
}


class Graph {
    // defining vertex array and adjacent list
    constructor(NumVertices) {
        this.NumVertices = NumVertices;
        this.AdjList = new Map();
    }

    // addEdge(v, w)

    // bfs(v)
    // dfs(v)

    // add vertex to the graph
    addVertex(chainId, height) {
        let vertex = `${chainId}-${height}`;
        this.AdjList.set(vertex, []);
    }

    delVertex(chainId, height) {
        console.log(`delVertex()`);

        // First get all the adjacent vertices and delete their outbound edges
        for (let edge of this.AdjList.keys()) {
            console.log(`vertex ${edge}`);
            if (edge)
        }

        //this.AdjList.delete(`${chainId}-${height}`);
        // Delete all incomig edges
        // for (var entry in this.AdjList.entries()) {
        //     console.log(`TEST`);
        //     let key = entry[0], value = entry[1];
        //     console.log(`key ${key} value ${value}`)
        // }
        // todo check this
    }

    // Undirected
    addEdge(chainId1, height1, chainId2, height2) {
        let u = `${chainId1}-${height1}`;
        let v = `${chainId2}-${height2}`;

        this.AdjList.get(u).push(v);
        this.AdjList.get(v).push(u);
    }

    hasEdge(u, v) {
        console.log(`has edge height ${u} -> ${v}: ${this.AdjList.get(height)}`);
        return false;
    }

    printGraph() {
        // get all the vertices
        var get_keys = this.AdjList.keys();

        // iterate over the vertices
        for (var i of get_keys) {
            // great the corresponding adjacency list
            // for the vertex
            var get_values = this.AdjList.get(i);
            var conc = "";

            // iterate over the adjacency list
            // concatenate the values into a string
            for (var j of get_values) conc += j + " ";

            // print the vertex and its adjacency list
            console.log(`Edge: ${i} -> ${conc}`);
        }
    }

    isMineable(chainId, height) {
        chainId = 0;
        height = 1000;
        //this.hasEdge()
    }
}

module.exports = Graph;